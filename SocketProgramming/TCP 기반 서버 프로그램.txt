err_handler.h

TCP 기반 서버-클라이언트 프로그램 예제에서
오류 메세지 출력 위해 함수 정의 헤더파일

void err_handler(const char* msg)
{
fputs(msg, stderr);
fputc('\n', stderr);
exit(1);
}


echo_server.c

클라이언트에서 전달된 메세지를 화면에 그대로 출력

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "err_handler.h"


#define BUFSIZE 1024

int main(int argc, char** argv)
{
int srv_socket, clt_socket;
int msg[BUFSIZE];
int msg_len;

struct sockaddr_in svr_addr, clt_addr;
int clt_addr_len;
int ret, i;

if (argc != 2)
{
printf("usage: %s <port> \n", argv[0]);
exit(1)
}

srv_socket=socket(PF_INET,SOCK_STREAM,0);
if(srv_socket < 0)
{
err_handler("error:srv_socket()");
}

memset(&srv_addr,0,sizeof(srv_addr));
srv_addr.sin_family=AF_INET;
srv_addr.sin_addr.s_addr=htnol(INADDR_ANY);
srv_addr.sin_port=htons(atoi(argv[1]));

if(bind(srv_socket, (struct sockaddr*)&srv_addr, sizeof(srv_addr))<0)
{
err_handler("error:bind()");
}

if(listen(srv_socket,5)<0)
{
err_handler("error:listen()");
}

for(int i=0;i<5;i++)
{
clt_socket=accept(srv_socket, (struct sockaddr*)&clt_addr, &clt_addr_len);
if(clt_socket<0)
{
err_handler("error:accept()");
}
else
{
printf("Connecting #%fd",i+1);
}

while((msg_len=read(clt_socket,msg,BUFSIZE))>0)
{
write(clt_socket,msg,msg_len);
}

close(clt_socket);
}
close(srv_socket);
return 0;
}