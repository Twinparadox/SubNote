1. 사용자로부터 문자열 입력
2. 입력된 문자열을 연결된 소켓을 통해 송신
3. 소켓을 통해 송신된 문자열 수신
4. 수신한 문자열을 화면에 출력
5. 정상 수신되었음을 메세지로 송신
6. 소켓을 통해 송신된 메세지를 수신함
7. 수신된 메세지를 출력


- 소켓 통신을 위해서는 통신에 사용할 프로토콜 지정해야
- 이를 위해 지역(자신)의 IP Address/Port Number, 원격(상대방) IP Address/Port Number 정보가 필요


connect Function

서버와 통신을 위한 연결(세션)을 생성
연결할 서버의 주소 정보를 설정해야 함

int connect(int sockfd, const struct sockaddr* addr, socklen_t addrlen);
return 0(success), -1(fail)

- sockfd : 서버에 연결 요청하기 위한 클라이언트 소켓 디스크립터
- addr : 연결할 서버의 주소 정보가 설정된 구조체
- addrlen : addr의 크기



read Function

전송된 메세지를 수신하기 위해 사용
LINUX에서는 소켓이나 파일을 동일한 타입의 디스크립터로 정의하므로 데이터 수신할 때 사용 가능

ssize_t read(int fd, void* buf, size_t nbytes);
성공 : 읽은 데이터의 크기(byte)
실패 : -1

- fd : 데이터를 읽을 소켓 or 파일 디스크립터
- buf : 함수에 의해 읽혀질 데이터가 저장될 buffer의 포인터
- nbytes : 함수 호출 시, 읽고자하는 데이터의 크기(byte)




write Function

메세지를 송신하기 위해 사용
LINUX에서는 소켓이나 파일을 동일한 타입의 디스크립터로 정의하므로 데이터 전송할 때 사용 가능

ssize_t write(int fd, const void* buf, size_t nbytes);
성공 : 읽은 데이터의 크기(byte)
실패 : -1

- fd : 데이터를 전송할 소켓 or 파일 스크립터
- buf : 전송할 데이터를 가지고 있는 buffer의 포인터
- nbytes : 전송할 데이터의 크기(byte)