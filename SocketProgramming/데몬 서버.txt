데몬 서버 구축


SIGCHLD와 프로세스 종료

1. 데몬 프로세스
- 백그라운드로 실행되는 프로세스
- 터미널에서 데몬 실행 후 사용자가 로그아웃해도 종료되지 않음
- 데몬은 kill 명령이나 SIGKILL 시그널을 보냄으로써 종료


2. 프로세스 종료
- SIGCHLD 시그널
- 프로세스 종료 시, 자신의 부모 프로세스에게 보내는 시그널


3. wait() 함수
- 부모 프로세스가 자식 프로세스가 종료된 것을 확인 후 다른 작업을 할 경우 이용
- pid=wiat(&stat);로 코딩
  A. 자식 프로세스가 종료될 때까지 블록
  B. 종료 상태 값은 stat 인자로 반환
- 부모 프로세스는 SIGCHLD 시그널 처리를 통해 wait() 함수 대체 가능


4. SIGCHLD 기본처리는 무시


5. SIGCHLD 시그널을 처리하는 방법으로는 3가지

1) 부모 프로세스에서 wait() 호출 후, 자식 프로세스 종료
- 부모 프로세스는 wait() 호출 후 블록
- 자식 프로세스 종료 후 반환되면 계속 부모 프로세스 실행
2) 부모 프로세스에서 wait() 호출 전 자식 프로세스 종료
- 자식 프로세스는 좀비화
- 부모 프로세스는 필요 시 나중에 wait() 호출해 자식의 종료 상태 파악
3) 부모 프로세스가 wait() 호출 않고 종료
- 시스템 init 프로세스가 좀비 프로세스에 대해 부모 프로세스 역할 수행
- init 프로세스가 wait() 호출


6. SIG_IGN으로 SIGCHLD를 무시하는 경우

- 기본 동작으로 SIGCHLD를 무시하는 것과 유사
- 부모 프로세스가 wait() 호출 전, 자식 프로세스가 종료되어도 좀비가 발생하지 않음
- 이미 종료된 자식 프로세스의 상태 획득 불가
- wait() 호출 시, 자식 프로세스 없으면 -1 반환


7. 시그널 핸들러를 등록한 경우

- 부모 프로세스가 자신의 작업 수행 중 자식 프로세스의 종료 시점에 종료 상태를 알고자 할 경우
- 부모 프로세스는 wait() 호출로 인해 블록되지 않음
- 시그널 핸들러가 실행되어도 자식 프로세스의 좀비 상태가 유지되어 부모 프로세스는 wait() 함수 호출해야 함
