멀티 프로세스 기반 다중 접속 서버


1. 클라이언트 요청 시 마다, 신규 프로세스 생성해 서비스 제공
- 서버 프로세스(부모)는 accept 함수를 호출해 클라이언트의 연결 요청 수락
- 신규 생성된 소켓 디스크립터를 자식 프로세스가 이용해 클라이언트와 통신

2. fork 함수를 호출해 프로세스를 복사하면 커널 내 소켓이 새롭게 생성되는 것이 아니라 사용자 영역의 디스크립터만 복사

3. 커널 영역의 소켓은 이를 참조하는 디스크립터가 모두 종료해야만 소멸

4. 프로세스 기반 다중 접속 서버는 구현은 간단하나, fork 함수에 의한 부모 프로세스 복사로 인해 성능 저하 발생

5. 이를 예방하기 위한 Pre-forking에 의한 프로세스 풀을 이용하는 방법이 있으며, Apache 웹서버가 응용하고 있음



- 소켓 송/수신 기능 분리

1. 소켓은 양방향 통신이 가능
2. 송신부와 수신부를 분리하는 이유
- 복잡한 코드가 간단 -> 유연성 향상
- 불필요한 응답 수신을 위한 대기 시간 줄여 성능 개선