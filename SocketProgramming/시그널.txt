시그널

- 'signal.h'에 정의 됨

- 비동기적 사건들의 발생을 프로세스에게 알려줌
- 프로세스들 간 통신 방법 중 하나
- 소프트웨어 인터럽트

- kill 함수를 이용해 다른 프로세스에게 시그널 전달
- raise 함수를 이용해 자신에게 시그널을 발생

- 시그널에 의한 프로세스 종료 시, 이를 유발한 시그널의 종류를 전달하기 위해 반환 값의 상위 8bit에 시그널 번호를 하위 8 bit는 0으로 설정


int kill(pid_t pid, int sig);
성공 : 0, 실패 : -1

- pid : 시그널을 받을 프로세스 식별자
pid>0인 정수,  지정한 프로세스에만 시그널 전송
pid=0, 함수를 호출하는 프로세스와 같은 그룹에 있는 모든 프로세스에 시그널 전송
pid=-1, 함수를 호출하는 프로세스가 전송할 수 있는 권한을 가진 모든 프로세스에 시그널 전송
pid<-1인 정수, pid의 절대값 프로세스 그룹에 속하는 모든 프로세스에 시그널 전송

- sig : 시그널 번호



int raise(int sig);
성공 : 0, 실패 : -1

- sig : 시그널 번호




시그널 처리

1. 모든 시그널에 대해 기본적인 처리 방식이 설정되어 있음
- 대부분 프로세스 종료
- 시그널 무시

2. 응용의 요구 사항에 따라 시그널 처리하도록 프로그래밍함
- 시그널 핸들러 실행
- 시그널 무시
- 시그널 블록 : 프로세스가 임계 부분에서 실행되는 동안에 발생할 수 있는 인터럽트 방지
	-> 해당 시그널 수신 시, 시그널 대기큐에 들어감
	-> 현재 작업을 계속하고 나중에 시그널 처리
	-> 비트마스크 형태의 시그널 블록 마스크에 추가해 블록
	-> 블록된 시그널은 중복되지 않음

3. SIGKILL, SIGSTOP 시그널
- 기본 동작은 프로세스 종료
- 무시나 시그널 핸들러 등록 불허




시그널 핸들러

1. 시그널 집합
- 여러 개의 시그널을 한 번에 표시하기 위해 sigset_t 사용
- sigset_t는 1024개의 시그널 표시 가능, '/usr/include/bits/sigset.h'에서 정의

#define _SIGSET_NWORDS (1024/(8*sizeof(unsigned long int)))
typedef struct
{
unsigned long int __val[_SIGSET_NWORDS];
} __sigset_t;


3. sigaction() 함수를 사용해 시그널 핸들러 등록

int sigaction(int signum, const struct sigaction* act, struct sigaction* oldact);
성공 : 0, 실패 : -1

- signum : 시그널 번호(SIGKILL, SIGSTOP은 제외)
- act : 설정할 시그널 핸들러 포함한 구조체
- 이전 시그널 핸들러를 포함한 구조체


4. sigaction 구조체

struct sigaction
{
void(*sa_handler)(int);
void(*sa_sigaction)(int, siginfo_t*, void*);
sigset_t sa_mask;
int sa_flags;
void(*sa_restorer)(void);
};


- sa_handler, sa_sigaction
시그널 핸들러를 가리킴
일반적으로 sa_hander 이용
부가 정보 활용 시 sa_sigaction 이용

- sa_mask
시그널 핸들러가 동작되는 동안 블록할 시그널 집합
시그널 핸들러가 동작 중 sa_mask에 없는 시그널 발생
현재 시그널 핸들러는 인터럽트 되고, 새롭게 발생되 시그널 처리
시그널 핸들러 실행 중 인터럽트가 되지 않도록 sigfillset()함수로 모두 포함

- sa_restorer
사용되지 않음

- sa_flags
SA_SIGINFO
미설정 시, 시그널이 발생하면 sa_handler에 명시된 핸들러 함수가 호출
설정 시, 시그널이 발생하면 sa_sigaction에 명시된 핸들러 호출

SA_ONESHOT or SA_RESETHAND
시그널 핸들러가 한 번 실행 후, 시그널 처리 기본 동작으로 돌아감
설치한 시그널 핸들러는 한 번 실행 후, 시그널은 SIG_DFL에 의해 수행


5. signal_unsafe 함수

- 결과를 예측할 수 없는 함수
malloc, free, alarm, sleep, fcntl, fork 등
시그널 핸들러 외부의 작업과 충돌 가능성
정적 변수나 전역 변수 사용

- 호출해야 할 경우
직접 호출보다 핸들러 내에서는 특정 플래그만 설정
핸들러가 종료된 후 플래그를 확인하고 signal_unsafe한 함수 핸들러 밖에서 호출


6. signal 함수

- sigaction 함수가 만들어지기 이전에 사용
- 현재는 사용하지 않을 것을 권장
