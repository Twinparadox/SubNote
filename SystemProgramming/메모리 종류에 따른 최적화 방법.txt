### Memory 종류에 따른 최적화
ROM과 RAM의 용량 상황에 따라 적절한 방법을 취할 것

## ROM 최적화
1. 데드 코드 제거
컴파일러 최적화를 이용해 제거 가능
정상코드를 데드코드로 처리하는 것을 방지하기 위해 volatile 사용

2. 매크로, 인라인 함수 사용 자제
매크로나 인라인 함수는 호출 시, 함수코드가 호출위치에 삽입되므로, 속도는 향상되나 실행파일 크기 증가
인라인 함수는 처리 방식이 매크로 함수와 유사하나, 매크로 함수는 전처리기에 의해 처리되고, 인라인 함수는 컴파일러에 의해 처리

3. 라이브러리 함수 사용 자제
범용 코드이므로 코드 사이즈가 큼
직접 함수를 만들어 사용하면 크기 문제를 해소 가능

4. 상수 대신 지역변수 사용
상수는 ROM, 지역변수는 RAM에 저장
ROM이 작고, RAM이 넉넉할 경우 이 방법 이용

5. 불필요한 전역변수 초기화 지양
전역변수를 초기화하면 ROM과 RAM 모두 저장
전역변수를 초기화하지 않으면 bss 영역에만 저장되므로 ROM 절약



## RAM 최적화
1. 프로그램은 ROM에서 실행
프로그램을 RAM에서 실행하면, 속도는 빨라지나, 파일을 복사해야 하므로 사용량 증가
속도 중요성이 떨어지면 ROM에서 실행할 것

2. 함수 깊이는 2단 이하
함수 깊이가 깊어질 수록 호출 시 발생하는 문맥교환에 필요한 메모리가 더 많이 필요
함수에서 함수를 호출하는 것과 같이 깊이를 깊게 만들지 않아야 함
특히 재귀함수

3. 짧은 함수는 매크로나 인라인 함수를 사용
매크로나 인라인 함수는 함수로 분기하지 않기 때문에 스택을 따로 할당하지 않음

4. 큰 사이즈의 함수 인자는 포인터 활용
구조체와 같이 사이즈가 큰 데이터를 함수의 인자로 전달할 때 포인터 활용

5. 값의 변동이 없는 전역변수는 상수화